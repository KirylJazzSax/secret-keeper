syntax = "proto3";

package pb;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "rpc_create_user.proto";
import "rpc_login.proto";
import "rpc_show_secret.proto";
import "rpc_save_secret.proto";
import "rpc_secrets_list.proto";
import "rpc_delete_secret.proto";
import "rpc_delete_all_secrets.proto";

option go_package = "./;pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "Secret Keeper API";
		version: "0.1";
		contact: {
			name: "Secret Keeper";
			url: "https://github.com/KirylJazzSax";
			email: "kirilljazzsax@gmail.com";
		};
	};
};

service SecretKeeper {
    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
        option (google.api.http) = {
            post: "/v1/create-user"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			description: "Add new user";
			summary: "Add new user";
        };
    }
    rpc LoginUser(LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/v1/login"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			description: "Login with email and password";
			summary: "Login with email and password";
        };
    }
    rpc SaveSecret(SaveSecretRequest) returns (SaveSecretResponse) {
        option (google.api.http) = {
            post: "/v1/secrets"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			description: "Create secret, provide title and body which should be encripted";
			summary: "Create secret";
        };
    }
    rpc SecretsList(SecretsListRequest) returns (SecretsListResponse) {
        option (google.api.http) = {
            get: "/v1/secrets"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			description: "Show all secrets that you saved";
			summary: "Show secrets";
        };
    }
    rpc ShowSecret(ShowSecretRequest) returns (ShowSecretResponse) {
        option (google.api.http) = {
            post: "/v1/secrets/{id}",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			description: "Show decoded secret by id";
			summary: "Show secret";
        };
    }
    rpc DeleteSecret(DeleteSecretRequest) returns (DeleteSecretResponse) {
        option (google.api.http) = {
            delete: "/v1/secrets/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			description: "Delete secret by id";
			summary: "Delete secret";
        };
    }
    rpc DeleteAllSecrets(DeleteAllSecretsRequest) returns (DeleteAllSecretsResponse) {
        option (google.api.http) = {
            delete: "/v1/secrets"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			description: "Delete all secrets, be careful with that command, you can never restore that";
			summary: "Delete all secrets";
        };
    }
}