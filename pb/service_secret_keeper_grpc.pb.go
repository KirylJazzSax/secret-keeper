// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: service_secret_keeper.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SecretKeeper_CreateUser_FullMethodName       = "/pb.SecretKeeper/CreateUser"
	SecretKeeper_LoginUser_FullMethodName        = "/pb.SecretKeeper/LoginUser"
	SecretKeeper_SaveSecret_FullMethodName       = "/pb.SecretKeeper/SaveSecret"
	SecretKeeper_SecretsList_FullMethodName      = "/pb.SecretKeeper/SecretsList"
	SecretKeeper_ShowSecret_FullMethodName       = "/pb.SecretKeeper/ShowSecret"
	SecretKeeper_DeleteSecret_FullMethodName     = "/pb.SecretKeeper/DeleteSecret"
	SecretKeeper_DeleteAllSecrets_FullMethodName = "/pb.SecretKeeper/DeleteAllSecrets"
)

// SecretKeeperClient is the client API for SecretKeeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecretKeeperClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	LoginUser(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	SaveSecret(ctx context.Context, in *SaveSecretRequest, opts ...grpc.CallOption) (*SaveSecretResponse, error)
	SecretsList(ctx context.Context, in *SecretsListRequest, opts ...grpc.CallOption) (*SecretsListResponse, error)
	ShowSecret(ctx context.Context, in *ShowSecretRequest, opts ...grpc.CallOption) (*ShowSecretResponse, error)
	DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*DeleteSecretResponse, error)
	DeleteAllSecrets(ctx context.Context, in *DeleteAllSecretsRequest, opts ...grpc.CallOption) (*DeleteAllSecretsResponse, error)
}

type secretKeeperClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretKeeperClient(cc grpc.ClientConnInterface) SecretKeeperClient {
	return &secretKeeperClient{cc}
}

func (c *secretKeeperClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, SecretKeeper_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretKeeperClient) LoginUser(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, SecretKeeper_LoginUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretKeeperClient) SaveSecret(ctx context.Context, in *SaveSecretRequest, opts ...grpc.CallOption) (*SaveSecretResponse, error) {
	out := new(SaveSecretResponse)
	err := c.cc.Invoke(ctx, SecretKeeper_SaveSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretKeeperClient) SecretsList(ctx context.Context, in *SecretsListRequest, opts ...grpc.CallOption) (*SecretsListResponse, error) {
	out := new(SecretsListResponse)
	err := c.cc.Invoke(ctx, SecretKeeper_SecretsList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretKeeperClient) ShowSecret(ctx context.Context, in *ShowSecretRequest, opts ...grpc.CallOption) (*ShowSecretResponse, error) {
	out := new(ShowSecretResponse)
	err := c.cc.Invoke(ctx, SecretKeeper_ShowSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretKeeperClient) DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*DeleteSecretResponse, error) {
	out := new(DeleteSecretResponse)
	err := c.cc.Invoke(ctx, SecretKeeper_DeleteSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretKeeperClient) DeleteAllSecrets(ctx context.Context, in *DeleteAllSecretsRequest, opts ...grpc.CallOption) (*DeleteAllSecretsResponse, error) {
	out := new(DeleteAllSecretsResponse)
	err := c.cc.Invoke(ctx, SecretKeeper_DeleteAllSecrets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretKeeperServer is the server API for SecretKeeper service.
// All implementations must embed UnimplementedSecretKeeperServer
// for forward compatibility
type SecretKeeperServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	LoginUser(context.Context, *LoginRequest) (*LoginResponse, error)
	SaveSecret(context.Context, *SaveSecretRequest) (*SaveSecretResponse, error)
	SecretsList(context.Context, *SecretsListRequest) (*SecretsListResponse, error)
	ShowSecret(context.Context, *ShowSecretRequest) (*ShowSecretResponse, error)
	DeleteSecret(context.Context, *DeleteSecretRequest) (*DeleteSecretResponse, error)
	DeleteAllSecrets(context.Context, *DeleteAllSecretsRequest) (*DeleteAllSecretsResponse, error)
	mustEmbedUnimplementedSecretKeeperServer()
}

// UnimplementedSecretKeeperServer must be embedded to have forward compatible implementations.
type UnimplementedSecretKeeperServer struct {
}

func (UnimplementedSecretKeeperServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedSecretKeeperServer) LoginUser(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedSecretKeeperServer) SaveSecret(context.Context, *SaveSecretRequest) (*SaveSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSecret not implemented")
}
func (UnimplementedSecretKeeperServer) SecretsList(context.Context, *SecretsListRequest) (*SecretsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecretsList not implemented")
}
func (UnimplementedSecretKeeperServer) ShowSecret(context.Context, *ShowSecretRequest) (*ShowSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowSecret not implemented")
}
func (UnimplementedSecretKeeperServer) DeleteSecret(context.Context, *DeleteSecretRequest) (*DeleteSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecret not implemented")
}
func (UnimplementedSecretKeeperServer) DeleteAllSecrets(context.Context, *DeleteAllSecretsRequest) (*DeleteAllSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllSecrets not implemented")
}
func (UnimplementedSecretKeeperServer) mustEmbedUnimplementedSecretKeeperServer() {}

// UnsafeSecretKeeperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretKeeperServer will
// result in compilation errors.
type UnsafeSecretKeeperServer interface {
	mustEmbedUnimplementedSecretKeeperServer()
}

func RegisterSecretKeeperServer(s grpc.ServiceRegistrar, srv SecretKeeperServer) {
	s.RegisterService(&SecretKeeper_ServiceDesc, srv)
}

func _SecretKeeper_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretKeeperServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretKeeper_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretKeeperServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretKeeper_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretKeeperServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretKeeper_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretKeeperServer).LoginUser(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretKeeper_SaveSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretKeeperServer).SaveSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretKeeper_SaveSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretKeeperServer).SaveSecret(ctx, req.(*SaveSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretKeeper_SecretsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretKeeperServer).SecretsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretKeeper_SecretsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretKeeperServer).SecretsList(ctx, req.(*SecretsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretKeeper_ShowSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretKeeperServer).ShowSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretKeeper_ShowSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretKeeperServer).ShowSecret(ctx, req.(*ShowSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretKeeper_DeleteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretKeeperServer).DeleteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretKeeper_DeleteSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretKeeperServer).DeleteSecret(ctx, req.(*DeleteSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretKeeper_DeleteAllSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretKeeperServer).DeleteAllSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretKeeper_DeleteAllSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretKeeperServer).DeleteAllSecrets(ctx, req.(*DeleteAllSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecretKeeper_ServiceDesc is the grpc.ServiceDesc for SecretKeeper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecretKeeper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SecretKeeper",
	HandlerType: (*SecretKeeperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _SecretKeeper_CreateUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _SecretKeeper_LoginUser_Handler,
		},
		{
			MethodName: "SaveSecret",
			Handler:    _SecretKeeper_SaveSecret_Handler,
		},
		{
			MethodName: "SecretsList",
			Handler:    _SecretKeeper_SecretsList_Handler,
		},
		{
			MethodName: "ShowSecret",
			Handler:    _SecretKeeper_ShowSecret_Handler,
		},
		{
			MethodName: "DeleteSecret",
			Handler:    _SecretKeeper_DeleteSecret_Handler,
		},
		{
			MethodName: "DeleteAllSecrets",
			Handler:    _SecretKeeper_DeleteAllSecrets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_secret_keeper.proto",
}
